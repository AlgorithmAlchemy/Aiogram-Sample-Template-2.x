from aiogram import executor
from aiogram.types import AllowedUpdates
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import logging
import signal
import sys
from datetime import datetime

from data.config import config
from loader import bot, dp, loader
from models.sqlite3_creator import connect
from utils.integration import create_integration
# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
import filters
import handlers
import models
import states

logger = logging.getLogger(__name__)


class BotManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º"""
    
    def __init__(self):
        self.scheduler = AsyncIOScheduler(timezone=config.bot.timezone)
        self.start_time = datetime.now()
        
    async def setup_database(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            connect()
            logger.info("Database connected successfully")
        except Exception as e:
            logger.error(f"Database connection failed: {e}")
            raise
    
    def setup_scheduler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
        # –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
        # self.scheduler.add_job(
        #     self.daily_stats, trigger='cron', hour=9, minute=0
        # )
        # self.scheduler.add_job(
        #     self.cleanup_old_data, trigger='cron', hour=2, minute=0
        # )
        
        self.scheduler.start()
        logger.info("Scheduler started")
    
    async def setup_commands(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        commands, admin_commands = loader.setup_commands()
        
        try:
            await bot.set_my_commands(commands)
            logger.info("Bot commands set successfully")
        except Exception as e:
            logger.error(f"Failed to set bot commands: {e}")
    
    async def daily_stats(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        try:
            from models.user import User
            
            total_users = User.select().count()
            active_users = User.select().where(
                User.is_banned == False
            ).count()
            
            stats_text = f"""
<b>üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}

<b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%d.%m.%Y')}
"""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            for admin_id in config.admin.owner_ids:
                try:
                    await bot.send_message(
                        admin_id, stats_text, parse_mode='HTML'
                    )
                except Exception as e:
                    logger.error(
                        f"Failed to send stats to admin {admin_id}: {e}"
                    )
                    
        except Exception as e:
            logger.error(f"Error in daily stats: {e}")
    
    async def cleanup_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤,
            # –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ —Ç.–¥.
            logger.info("Cleanup completed")
        except Exception as e:
            logger.error(f"Error in cleanup: {e}")
    
    def get_uptime(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        uptime = datetime.now() - self.start_time
        days = uptime.days
        hours, remainder = divmod(uptime.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        
        if days > 0:
            return f"{days}–¥ {hours}—á {minutes}–º"
        elif hours > 0:
            return f"{hours}—á {minutes}–º"
        else:
            return f"{minutes}–º {seconds}—Å"
    
    async def on_startup(self, dp):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        logger.info("Bot starting up...")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await self.setup_database()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self.setup_scheduler()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥
        await self.setup_commands()
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —à–∞–±–ª–æ–Ω–∞
        self.integration = create_integration(dp)
        self.integration.setup_all()
        self.integration.execute_startup_hooks()
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.setup_signal_handlers()
        
        logger.info("Bot started successfully!")
    
    async def on_shutdown(self, dp):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
        logger.info("Bot shutting down...")
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ shutdown hooks
        if hasattr(self, 'integration'):
            self.integration.execute_shutdown_hooks()
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self.scheduler.shutdown()
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        await bot.session.close()
        
        logger.info("Bot stopped successfully!")
    
    def setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        def signal_handler(signum, frame):
            logger.info(f"Received signal {signum}, shutting down...")
            sys.exit(0)
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)


class MiddlewareManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è middleware"""
    
    @staticmethod
    def setup_middleware(dp):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ middleware
        # dp.middleware.setup(CustomMiddleware())
        pass


class ErrorHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    
    @staticmethod
    async def handle_errors(update, exception):
        """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Update {update} caused error {exception}")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        # –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        
        return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞
    bot_manager = BotManager()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
    MiddlewareManager.setup_middleware(dp)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    dp.errors_handler()(ErrorHandler.handle_errors)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(
        dp,
        skip_updates=True,
        # ============================================
        # ALLOWED_UPDATES - –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è aiogram 2.x
        # ============================================
        # 
        # 1. –í—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        allowed_updates=AllowedUpdates.all(),
        # 
        # 2. –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        # allowed_updates=AllowedUpdates.MESSAGE,
        # 
        # 3. –¢–æ–ª—å–∫–æ callback –∑–∞–ø—Ä–æ—Å—ã
        # allowed_updates=AllowedUpdates.CALLBACK_QUERY,
        # 
        # 4. –¢–æ–ª—å–∫–æ inline –∑–∞–ø—Ä–æ—Å—ã
        # allowed_updates=AllowedUpdates.INLINE_QUERY,
        # 
        # 5. –¢–æ–ª—å–∫–æ chosen inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        # allowed_updates=AllowedUpdates.CHOSEN_INLINE_RESULT,
        # 
        # 6. –¢–æ–ª—å–∫–æ channel posts
        # allowed_updates=AllowedUpdates.CHANNEL_POST,
        # 
        # 7. –¢–æ–ª—å–∫–æ edited channel posts
        # allowed_updates=AllowedUpdates.EDITED_CHANNEL_POST,
        # 
        # 8. –¢–æ–ª—å–∫–æ edited messages
        # allowed_updates=AllowedUpdates.EDITED_MESSAGE,
        # 
        # 9. –¢–æ–ª—å–∫–æ shipping queries
        # allowed_updates=AllowedUpdates.SHIPPING_QUERY,
        # 
        # 10. –¢–æ–ª—å–∫–æ pre-checkout queries
        # allowed_updates=AllowedUpdates.PRE_CHECKOUT_QUERY,
        # 
        # 11. –¢–æ–ª—å–∫–æ poll answers
        # allowed_updates=AllowedUpdates.POLL_ANSWER,
        # 
        # 12. –¢–æ–ª—å–∫–æ my chat member updates
        # allowed_updates=AllowedUpdates.MY_CHAT_MEMBER,
        # 
        # 13. –¢–æ–ª—å–∫–æ chat member updates
        # allowed_updates=AllowedUpdates.CHAT_MEMBER,
        # 
        # 14. –¢–æ–ª—å–∫–æ chat join requests
        # allowed_updates=AllowedUpdates.CHAT_JOIN_REQUEST,
        # 
        # 15. –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∏–ø–æ–≤
        # allowed_updates=[
        #     AllowedUpdates.MESSAGE,
        #     AllowedUpdates.CALLBACK_QUERY,
        #     AllowedUpdates.EDITED_MESSAGE
        # ],
        # 
        # 16. –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ callback –∑–∞–ø—Ä–æ—Å—ã (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –±–æ—Ç–æ–≤)
        # allowed_updates=[
        #     AllowedUpdates.MESSAGE,
        #     AllowedUpdates.CALLBACK_QUERY
        # ],
        # 
        # 17. –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –±–æ—Ç–æ–≤)
        # allowed_updates=AllowedUpdates.MESSAGE,
        # 
        # 18. –í—Å–µ –∫—Ä–æ–º–µ channel posts (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –±–æ—Ç–æ–≤)
        # allowed_updates=[
        #     AllowedUpdates.MESSAGE,
        #     AllowedUpdates.EDITED_MESSAGE,
        #     AllowedUpdates.CALLBACK_QUERY,
        #     AllowedUpdates.INLINE_QUERY,
        #     AllowedUpdates.CHOSEN_INLINE_RESULT,
        #     AllowedUpdates.SHIPPING_QUERY,
        #     AllowedUpdates.PRE_CHECKOUT_QUERY,
        #     AllowedUpdates.POLL_ANSWER,
        #     AllowedUpdates.MY_CHAT_MEMBER,
        #     AllowedUpdates.CHAT_MEMBER,
        #     AllowedUpdates.CHAT_JOIN_REQUEST
        # ],
        # ============================================
        on_startup=bot_manager.on_startup,
        on_shutdown=bot_manager.on_shutdown
    )


if __name__ == '__main__':
    main()
