import logging

from aiogram import types
from aiogram.types import ParseMode

from handlers.base_handler import BaseCommandHandler, BaseMessageHandler, BaseCallbackHandler
from loader import dp

logger = logging.getLogger(__name__)


class ExampleCommandHandler(BaseCommandHandler):
    """–ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""

    def get_command(self) -> str:
        return "example"

    async def handle(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /example"""
        await message.answer(
            "–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤ –û–û–ü —Å—Ç–∏–ª–µ!",
            parse_mode=ParseMode.HTML
        )


class ExampleMessageHandler(BaseMessageHandler):
    """–ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""

    def get_content_types(self) -> list:
        return ['photo', 'document']

    async def handle(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        if message.photo:
            await message.answer("–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ!")
        elif message.document:
            await message.answer("–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç!")


class ExampleCallbackHandler(BaseCallbackHandler):
    """–ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""

    def get_callback_data(self) -> str:
        return "example_button"

    async def handle(self, callback_query: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback"""
        await callback_query.answer("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!")
        await callback_query.message.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –≤ –û–û–ü —Å—Ç–∏–ª–µ!")


class AdvancedCommandHandler(BaseCommandHandler):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""

    def __init__(self, dp):
        super().__init__(dp)
        self.counter = 0

    def get_command(self) -> str:
        return "counter"

    async def handle(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º"""
        self.counter += 1
        await message.answer(
            f"–°—á–µ—Ç—á–∏–∫: {self.counter}",
            parse_mode=ParseMode.HTML
        )


class AdminCommandHandler(BaseCommandHandler):
    """–ü—Ä–∏–º–µ—Ä –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""

    def get_command(self) -> str:
        return "admin"

    async def handle(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
        if message.from_user.id not in [123456789]:  # ID –∞–¥–º–∏–Ω–æ–≤
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return

        await message.answer(
            "üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å!",
            parse_mode=ParseMode.HTML
        )


class MultiCommandHandler(BaseCommandHandler):
    """–ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏"""

    def __init__(self, dp, command: str):
        self._command = command
        super().__init__(dp)

    def get_command(self) -> str:
        return self._command

    async def handle(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        command = message.get_command()
        await message.answer(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command}")


def create_handlers():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤"""

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
    example_cmd = ExampleCommandHandler(dp)
    example_msg = ExampleMessageHandler(dp)
    example_callback = ExampleCallbackHandler(dp)
    advanced_cmd = AdvancedCommandHandler(dp)
    admin_cmd = AdminCommandHandler(dp)

    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
    cmd1 = MultiCommandHandler(dp, "cmd1")
    cmd2 = MultiCommandHandler(dp, "cmd2")
    cmd3 = MultiCommandHandler(dp, "cmd3")

    logger.info("All example handlers created successfully!")

    return [
        example_cmd,
        example_msg,
        example_callback,
        advanced_cmd,
        admin_cmd,
        cmd1,
        cmd2,
        cmd3
    ]


def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –û–û–ü –ø–æ–¥—Ö–æ–¥–∞"""
    print("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –û–û–ü –ø–æ–¥—Ö–æ–¥–∞ –¥–ª—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ ===")

    # –°–æ–∑–¥–∞–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã
    handlers = create_handlers()

    print(f"–°–æ–∑–¥–∞–Ω–æ {len(handlers)} —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤")
    print("–í—Å–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

    print("\n–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –û–û–ü –ø–æ–¥—Ö–æ–¥–∞:")
    print("‚úÖ –ï–¥–∏–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –≤—Å–µ—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤")
    print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    print("‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è")
    print("‚úÖ –õ–µ–≥–∫–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ")
    print("‚úÖ –ß–∏—Å—Ç—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∫–æ–¥")

    print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")


if __name__ == "__main__":
    main()
