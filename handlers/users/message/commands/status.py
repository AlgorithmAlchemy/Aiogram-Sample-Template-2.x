import logging
from datetime import datetime

import psutil
from aiogram import types
from aiogram.types import ParseMode

from loader import dp
from models.user import User

logger = logging.getLogger(__name__)


class StatusCommand:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""

    @staticmethod
    async def handle(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ GB
            memory_used_gb = memory.used // (1024 ** 3)
            memory_total_gb = memory.total // (1024 ** 3)
            disk_used_gb = disk.used // (1024 ** 3)
            disk_total_gb = disk.total // (1024 ** 3)

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            total_users = User.select().count()
            today_start = datetime.now().replace(
                hour=0, minute=0, second=0, microsecond=0
            )
            active_users = User.select().where(
                User.last_activity >= today_start
            ).count()

            status_text = f"""
<b>üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>

<b>–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ CPU: {cpu_percent}%
‚Ä¢ RAM: {memory.percent}% ({memory_used_gb}GB / {memory_total_gb}GB)
‚Ä¢ –î–∏—Å–∫: {disk.percent}% ({disk_used_gb}GB / {disk_total_gb}GB)

<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {active_users}

<b>–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:</b>
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
‚Ä¢ API Telegram: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω

<b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {StatusCommand._get_uptime()}
"""

            await message.answer(
                status_text,
                parse_mode=ParseMode.HTML
            )

        except Exception as e:
            logger.error(f"Error getting status: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")

    @staticmethod
    def _get_uptime() -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
        return datetime.now().strftime('%d.%m.%Y %H:%M:%S')


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
@dp.message_handler(commands=['status'], chat_type='private')
async def status_cmd(message: types.Message):
    await StatusCommand.handle(message)
